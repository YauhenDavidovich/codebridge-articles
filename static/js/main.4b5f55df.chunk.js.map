{"version":3,"sources":["dal/api.ts","bll/articles-reducer.ts","components/utils/dateConvert.ts","components/Article.tsx","components/Search.tsx","App.tsx","reportWebVitals.ts","bll/store.ts","index.tsx"],"names":["instance","axios","create","baseURL","API","params","get","initialState","SET_ARTICLES","getArticlesTC","data","dispatch","then","res","articles","type","catch","err","console","log","dateOptions","year","month","day","StyledCard","styled","Card","name","slot","color","background","border","boxShadow","margin","marginBottom","borderRadius","maxWidth","width","height","position","StyledCardActions","CardActions","bottom","left","textDecoration","Article","props","CardMedia","component","image","imageUrl","alt","CardContent","Typography","gutterBottom","variant","Date","publishedAt","toLocaleDateString","highlightClassName","searchWords","search","autoEscape","textToHighlight","title","summary","Link","RouterLink","to","underline","Search","className","TextField","style","id","label","onChange","e","setSearchTerm","target","value","App","useState","searchTerm","useDispatch","useSelector","state","artilcles","searchedArticles","useMemo","searched","filter","item","toLowerCase","includes","useEffect","_limit","map","article","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4b5f55df.chunk.js","sourcesContent":["import axios, {AxiosResponse} from \"axios\"\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.spaceflightnewsapi.net/v3\",\r\n})\r\n\r\nexport const API = {\r\n    getArticles(params: GetArticlesParamsType) {\r\n        return instance.get<GetArticlesParamsType, AxiosResponse<Array<ArticlesType>>>('articles', {params: {...params}})\r\n    }\r\n}\r\n\r\nexport type GetArticlesParamsType = {\r\n    _limit: number\r\n}\r\n\r\nexport interface ArticlesType {\r\n    id: number;\r\n    title: string;\r\n    url: string;\r\n    imageUrl: string;\r\n    newsSite: string;\r\n    summary: string;\r\n    publishedAt: string;\r\n    updatedAt: string;\r\n    featured: boolean;\r\n    launches: Launch[];\r\n    events: any[];\r\n}\r\n\r\n\r\nexport interface Launch {\r\n    id: string;\r\n    provider: string;\r\n}\r\n","import {Dispatch} from \"redux\";\r\nimport {API, ArticlesType, GetArticlesParamsType} from \"../dal/api\";\r\n\r\n\r\n// let initialState:ArticlesInitialStateType = {\r\n//     articles: [\r\n//         {\r\n//             id: 0,\r\n//             title: \"\",\r\n//             url: \"\",\r\n//             imageUrl: \"\",\r\n//             newsSite: \"\",\r\n//             summary: \"\",\r\n//             publishedAt: \"\",\r\n//             updatedAt: \"\",\r\n//             featured: false,\r\n//             launches: [],\r\n//             events: [],\r\n//         }],\r\n// };\r\n//\r\n// type ArticlesInitialStateType = {\r\n//     articles: ArticlesType[]\r\n// }\r\n\r\nconst initialState: Array<ArticlesType> = []\r\n\r\n//Reducer\r\nexport const articlesReducer = (state: Array<ArticlesType> = initialState, action: ActionsTypes): Array<ArticlesType> => {\r\n    switch (action.type) {\r\n        case SET_ARTICLES:\r\n            return action.articles\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// actions\r\nconst SET_ARTICLES = 'SET-SET_ARTICLES';\r\n\r\n// Action Creators\r\nexport const SetArticlesAC = (articles: Array<ArticlesType>) => ({\r\n    type: SET_ARTICLES,\r\n    articles,\r\n} as const);\r\n\r\nexport const getArticlesTC = (data: GetArticlesParamsType) => (dispatch: Dispatch) => {\r\n    API.getArticles(data)\r\n        .then(res => {\r\n            debugger\r\n            dispatch(SetArticlesAC(res.data))\r\n        })\r\n        .catch(err => {\r\n            console.log(err)\r\n        })\r\n}\r\n\r\n\r\nexport type SetArticlesType = ReturnType<typeof SetArticlesAC>\r\ntype ActionsTypes = SetArticlesType\r\n","export interface DateTimeFormatOptions {\r\n    weekday?:\"long\" | \"short\" | \"narrow\";\r\n    year?: \"numeric\" | \"2-digit\";\r\n    month?: \"numeric\" | \"2-digit\" |\"long\" | \"short\" | \"narrow\";\r\n    day?: \"numeric\" | \"2-digit\";\r\n    hour?: \"numeric\" | \"2-digit\";\r\n    minute?: \"numeric\" | \"2-digit\";\r\n}\r\n\r\nexport const dateOptions:DateTimeFormatOptions = { year: 'numeric', month: 'long',day:\"numeric\" };\r\n","import React from \"react\";\r\nimport {styled} from \"@mui/system\";\r\nimport {Link as RouterLink} from 'react-router-dom';\r\nimport {Card, CardActions, CardContent, CardMedia, Link, Typography} from \"@mui/material\";\r\nimport {dateOptions} from \"./utils/dateConvert\";\r\nimport Highlighter from \"react-highlight-words\";\r\n\r\n\r\nconst StyledCard = styled(Card, {\r\n    name: \"StyledCard\",\r\n    slot: \"Wrapper\"\r\n})({\r\n    color: \"#6B8068\",\r\n    //backgroundImage: `url(\"https://picsum.photos/200/300\")`,\r\n    background: '#FFFFFF',\r\n    border: '1px solid #EAEAEA',\r\n    boxShadow: '0px 8px 24px rgba(0, 0, 0, 0.05)',\r\n    margin: \"auto\",\r\n    marginBottom: 45,\r\n    borderRadius: 5,\r\n    maxWidth: 400,\r\n    width: \"100%\",\r\n    height: 530,\r\n    position: 'relative',\r\n    \".MuiButton-root\": {color: \"#FF0000\"}\r\n});\r\n\r\nconst StyledCardActions = styled(CardActions, {\r\n    name: \"StyledCardActions\",\r\n    slot: \"Link\"\r\n})({\r\n    position: 'absolute',\r\n    bottom: 10,\r\n    left: 10,\r\n    textDecoration: 'none',\r\n    color: \"#363636\",\r\n    \".MuiButton-root\": {color: \"#FF0000\"}\r\n});\r\n\r\n\r\ntype ArticleType = {\r\n    id: number,\r\n    title: string,\r\n    // \"url\": string,\r\n    imageUrl: string,\r\n    // \"newsSite\": string,\r\n    summary: string,\r\n    publishedAt: string,\r\n    search: string,\r\n}\r\n\r\n\r\n\r\nconst Article = (props: ArticleType) => {\r\n\r\n    return (\r\n        <StyledCard >\r\n            <CardMedia\r\n                component=\"img\"\r\n                height=\"217\"\r\n                image={props.imageUrl}\r\n                alt=\"article image\"\r\n            />\r\n            <CardContent>\r\n                <Typography gutterBottom variant=\"h6\" component=\"div\">\r\n                    {new Date(props.publishedAt).toLocaleDateString(\"en-US\",dateOptions)}\r\n                </Typography>\r\n                <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n                    <Highlighter\r\n                        highlightClassName=\"YourHighlightClass\"\r\n                        searchWords={[props.search]}\r\n                        autoEscape={true}\r\n                        textToHighlight={props.title}\r\n                    />\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                    <Highlighter\r\n                        highlightClassName=\"HighlightClass\"\r\n                        searchWords={[props.search]}\r\n                        autoEscape={true}\r\n                        textToHighlight={props.summary}\r\n                    />\r\n                </Typography>\r\n            </CardContent>\r\n            <StyledCardActions>\r\n                <Link component={RouterLink} to=\"/article-page\" color=\"secondary\" underline=\"none\">\r\n                    {'Read more'}\r\n                </Link>\r\n            </StyledCardActions>\r\n        </StyledCard>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default Article\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {TextField} from \"@mui/material\";\r\n\r\ntype SearchPropsType = {\r\n    setSearchTerm: (e: string) => void\r\n}\r\n\r\n\r\nconst Search = (props: SearchPropsType) => {\r\n    return (\r\n        <div className=\"search\">\r\n            <TextField style={{width: \"70%\"}} id=\"outlined-basic\" label=\"🔍 Search\" variant=\"outlined\"\r\n                       onChange={(e) => props.setSearchTerm(e.target.value)}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Search;\r\n","import React, {useEffect, useMemo, useState} from 'react';\nimport './App.css';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {getArticlesTC} from \"./bll/articles-reducer\";\nimport {AppRootStateType} from \"./bll/store\";\nimport {ArticlesType} from \"./dal/api\";\nimport Article from \"./components/Article\";\nimport Search from \"./components/Search\";\n\nfunction App() {\n    const [searchTerm, setSearchTerm] = useState(\"\")\n    const dispatch = useDispatch()\n    const articles = useSelector<AppRootStateType, Array<ArticlesType>>(state => state.artilcles)\n\n    let searchedArticles = useMemo(() => {\n        let searched: Array<ArticlesType> = [...articles]\n        searched = searchTerm ? searched.filter(item => item.title.toLowerCase().includes(searchTerm.toLowerCase())) : searched\n        return searched\n    }, [articles, searchTerm])\n\n    useEffect(\n        () => {\n            dispatch(getArticlesTC({_limit: 100}))\n        },[]\n    )\n    return (\n\n        <div className=\"App\">\n            <Search setSearchTerm={setSearchTerm}/>\n            <div className={\"articles__wrapper\"}>\n                {searchedArticles.map(article => { return <Article\n                    id={article.id}\n                    title={article.title}\n                    imageUrl={article.imageUrl}\n                    summary={article.summary}\n                    publishedAt={article.publishedAt}\n                    search={searchTerm}\n\n                />})}\n            </div>\n\n\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {articlesReducer} from \"./articles-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    artilcles: articlesReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {HashRouter} from \"react-router-dom\";\nimport {store} from \"./bll/store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n;\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}